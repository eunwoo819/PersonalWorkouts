{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "01. TopicModelKorean",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "dswFW34BmXJa"
      },
      "source": [
        "import csv\n",
        "text = []\n",
        "y = []\n",
        "\n",
        "with open('movie_data_new.csv', encoding='utf-8') as csvfile:\n",
        "    csvreader = csv.reader(csvfile)\n",
        "    for row in csvreader:\n",
        "        #print(row)\n",
        "        if row and len(row[0]) > 10: #review 길이가 10자 이상인 경우만\n",
        "#        if row: #그 줄에 내용이 있는 경우에만\n",
        "            text.append(row[0]) #영화 리뷰를 text 리스트에 추가\n",
        "            y.append(row[2]) #영화이름을 text 리스트에 추가"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kAwrdVI5mZ_T",
        "outputId": "76aaf78f-5e68-4f46-a3e4-84707f9778da",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print('리뷰 수:', len(text))\n",
        "print('리뷰영화:', set(y))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "리뷰 수: 12445\n",
            "리뷰영화: {'범죄도시', '신과함께', '라라랜드', '택시운전사', '곤지암', '코코', '인피니티 워'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QX9L9J9ambV2",
        "outputId": "7cce10c1-c75c-46e1-c23c-289dfce53ca0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "text[:10]"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['헐..다 죽었어....나중에 앤트맨 보다가도 깜놀...',\n",
              " '개연성은 무시해라 액션을 즐겨라 스타로드가 이끌어준다 각각의 영웅들을 즐겨라 그리고 단적인 신념이 얼마나 부질없는지 보셔라',\n",
              " '정말 지루할틈없이 넘잘만들었다 역시 대단하다',\n",
              " '마지막에 누구한테 연락한거지? 궁금',\n",
              " '다음 편이 궁굼해지네요^^',\n",
              " '안잼있는사람 있음???????????',\n",
              " '잘 만들었다! 지루할 틈이 없네...',\n",
              " '이제는 지겨워서 못보겠다',\n",
              " '롱턱 타노스의  장갑이 참 맘에 듬.  아이언 맨과 토르 닥터만 생고생하고..  가디언즈 오브 갤럭시 들 때문에  손해가 크다고 봄  들짐승 하고 칡뿌리 같은 캐릭이  재미를 더해줄줄 알았으나  아쉬움 . 분노의 상징 헐크가 겁을 먹다니..로키의 초반 출연뿐이 서운하지만  본 영화에 이어질 내용에 적합하지 않은지 서두에  죽는부분으로 마무리 됨은 심섬한 충격임 .  다음편에 헬라가 다시 나올까?',\n",
              " '와~~~~~진짜 개쪄는 인피니티워!!몇번을 봐도 개지린다.너무잼있다.어벤져스4도 너무 기대된다.빨리 2019년이왔으면 좋겠다.']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ir53Zw0Nm9vN",
        "outputId": "9c65497e-c4b3-4945-80cc-abe180cf512b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "!apt-get update\n",
        "!apt-get install g++ openjdk-8-jdk python-dev python3-dev\n",
        "!pip3 install Jpype1-py3\n",
        "!pip3 install konlpy\n",
        "!JAVA_HOME=\"C:\\Program Files\\Java\\jdk-15.0.1\\bin\""
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\r0% [Working]\r            \rGet:1 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease [3,626 B]\n",
            "\r0% [Connecting to archive.ubuntu.com (91.189.88.142)] [Connecting to security.u\r0% [Connecting to archive.ubuntu.com (91.189.88.142)] [Connecting to security.u\r                                                                               \rIgn:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n",
            "Ign:3 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n",
            "Get:4 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release [697 B]\n",
            "Hit:5 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n",
            "Get:6 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release.gpg [836 B]\n",
            "Get:7 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease [15.9 kB]\n",
            "Get:8 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n",
            "Hit:9 http://archive.ubuntu.com/ubuntu bionic InRelease\n",
            "Get:10 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n",
            "Get:12 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease [21.3 kB]\n",
            "Ign:13 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages\n",
            "Get:13 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages [407 kB]\n",
            "Get:14 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n",
            "Get:15 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main Sources [1,688 kB]\n",
            "Get:16 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1,354 kB]\n",
            "Get:17 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2,119 kB]\n",
            "Get:18 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [1,750 kB]\n",
            "Get:19 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [2,167 kB]\n",
            "Get:20 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main amd64 Packages [864 kB]\n",
            "Get:21 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic/main amd64 Packages [46.6 kB]\n",
            "Fetched 10.7 MB in 4s (2,657 kB/s)\n",
            "Reading package lists... Done\n",
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "python-dev is already the newest version (2.7.15~rc1-1).\n",
            "g++ is already the newest version (4:7.4.0-1ubuntu2.3).\n",
            "g++ set to manually installed.\n",
            "python3-dev is already the newest version (3.6.7-1~18.04).\n",
            "The following additional packages will be installed:\n",
            "  fonts-dejavu-core fonts-dejavu-extra libatk-wrapper-java\n",
            "  libatk-wrapper-java-jni libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin\n",
            "  libgtk2.0-common libxxf86dga1 openjdk-8-jdk-headless openjdk-8-jre\n",
            "  openjdk-8-jre-headless x11-utils\n",
            "Suggested packages:\n",
            "  gvfs openjdk-8-demo openjdk-8-source visualvm icedtea-8-plugin libnss-mdns\n",
            "  fonts-ipafont-gothic fonts-ipafont-mincho fonts-wqy-microhei\n",
            "  fonts-wqy-zenhei fonts-indic mesa-utils\n",
            "The following NEW packages will be installed:\n",
            "  fonts-dejavu-core fonts-dejavu-extra libatk-wrapper-java\n",
            "  libatk-wrapper-java-jni libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin\n",
            "  libgtk2.0-common libxxf86dga1 openjdk-8-jdk openjdk-8-jdk-headless\n",
            "  openjdk-8-jre openjdk-8-jre-headless x11-utils\n",
            "0 upgraded, 15 newly installed, 0 to remove and 31 not upgraded.\n",
            "Need to get 43.5 MB of archives.\n",
            "After this operation, 163 MB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/main amd64 libxxf86dga1 amd64 2:1.1.4-1 [13.7 kB]\n",
            "Get:2 http://archive.ubuntu.com/ubuntu bionic/main amd64 fonts-dejavu-core all 2.37-1 [1,041 kB]\n",
            "Get:3 http://archive.ubuntu.com/ubuntu bionic/main amd64 fonts-dejavu-extra all 2.37-1 [1,953 kB]\n",
            "Get:4 http://archive.ubuntu.com/ubuntu bionic/main amd64 x11-utils amd64 7.7+3build1 [196 kB]\n",
            "Get:5 http://archive.ubuntu.com/ubuntu bionic/main amd64 libatk-wrapper-java all 0.33.3-20ubuntu0.1 [34.7 kB]\n",
            "Get:6 http://archive.ubuntu.com/ubuntu bionic/main amd64 libatk-wrapper-java-jni amd64 0.33.3-20ubuntu0.1 [28.3 kB]\n",
            "Get:7 http://archive.ubuntu.com/ubuntu bionic/main amd64 libgtk2.0-common all 2.24.32-1ubuntu1 [125 kB]\n",
            "Get:8 http://archive.ubuntu.com/ubuntu bionic/main amd64 libgtk2.0-0 amd64 2.24.32-1ubuntu1 [1,769 kB]\n",
            "Get:9 http://archive.ubuntu.com/ubuntu bionic/main amd64 libgail18 amd64 2.24.32-1ubuntu1 [14.2 kB]\n",
            "Get:10 http://archive.ubuntu.com/ubuntu bionic/main amd64 libgail-common amd64 2.24.32-1ubuntu1 [112 kB]\n",
            "Get:11 http://archive.ubuntu.com/ubuntu bionic/main amd64 libgtk2.0-bin amd64 2.24.32-1ubuntu1 [7,536 B]\n",
            "Get:12 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 openjdk-8-jre-headless amd64 8u272-b10-0ubuntu1~18.04 [28.2 MB]\n",
            "Get:13 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 openjdk-8-jre amd64 8u272-b10-0ubuntu1~18.04 [69.6 kB]\n",
            "Get:14 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 openjdk-8-jdk-headless amd64 8u272-b10-0ubuntu1~18.04 [8,264 kB]\n",
            "Get:15 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 openjdk-8-jdk amd64 8u272-b10-0ubuntu1~18.04 [1,614 kB]\n",
            "Fetched 43.5 MB in 3s (13.3 MB/s)\n",
            "Selecting previously unselected package libxxf86dga1:amd64.\n",
            "(Reading database ... 144786 files and directories currently installed.)\n",
            "Preparing to unpack .../00-libxxf86dga1_2%3a1.1.4-1_amd64.deb ...\n",
            "Unpacking libxxf86dga1:amd64 (2:1.1.4-1) ...\n",
            "Selecting previously unselected package fonts-dejavu-core.\n",
            "Preparing to unpack .../01-fonts-dejavu-core_2.37-1_all.deb ...\n",
            "Unpacking fonts-dejavu-core (2.37-1) ...\n",
            "Selecting previously unselected package fonts-dejavu-extra.\n",
            "Preparing to unpack .../02-fonts-dejavu-extra_2.37-1_all.deb ...\n",
            "Unpacking fonts-dejavu-extra (2.37-1) ...\n",
            "Selecting previously unselected package x11-utils.\n",
            "Preparing to unpack .../03-x11-utils_7.7+3build1_amd64.deb ...\n",
            "Unpacking x11-utils (7.7+3build1) ...\n",
            "Selecting previously unselected package libatk-wrapper-java.\n",
            "Preparing to unpack .../04-libatk-wrapper-java_0.33.3-20ubuntu0.1_all.deb ...\n",
            "Unpacking libatk-wrapper-java (0.33.3-20ubuntu0.1) ...\n",
            "Selecting previously unselected package libatk-wrapper-java-jni:amd64.\n",
            "Preparing to unpack .../05-libatk-wrapper-java-jni_0.33.3-20ubuntu0.1_amd64.deb ...\n",
            "Unpacking libatk-wrapper-java-jni:amd64 (0.33.3-20ubuntu0.1) ...\n",
            "Selecting previously unselected package libgtk2.0-common.\n",
            "Preparing to unpack .../06-libgtk2.0-common_2.24.32-1ubuntu1_all.deb ...\n",
            "Unpacking libgtk2.0-common (2.24.32-1ubuntu1) ...\n",
            "Selecting previously unselected package libgtk2.0-0:amd64.\n",
            "Preparing to unpack .../07-libgtk2.0-0_2.24.32-1ubuntu1_amd64.deb ...\n",
            "Unpacking libgtk2.0-0:amd64 (2.24.32-1ubuntu1) ...\n",
            "Selecting previously unselected package libgail18:amd64.\n",
            "Preparing to unpack .../08-libgail18_2.24.32-1ubuntu1_amd64.deb ...\n",
            "Unpacking libgail18:amd64 (2.24.32-1ubuntu1) ...\n",
            "Selecting previously unselected package libgail-common:amd64.\n",
            "Preparing to unpack .../09-libgail-common_2.24.32-1ubuntu1_amd64.deb ...\n",
            "Unpacking libgail-common:amd64 (2.24.32-1ubuntu1) ...\n",
            "Selecting previously unselected package libgtk2.0-bin.\n",
            "Preparing to unpack .../10-libgtk2.0-bin_2.24.32-1ubuntu1_amd64.deb ...\n",
            "Unpacking libgtk2.0-bin (2.24.32-1ubuntu1) ...\n",
            "Selecting previously unselected package openjdk-8-jre-headless:amd64.\n",
            "Preparing to unpack .../11-openjdk-8-jre-headless_8u272-b10-0ubuntu1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jre-headless:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "Selecting previously unselected package openjdk-8-jre:amd64.\n",
            "Preparing to unpack .../12-openjdk-8-jre_8u272-b10-0ubuntu1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jre:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "Selecting previously unselected package openjdk-8-jdk-headless:amd64.\n",
            "Preparing to unpack .../13-openjdk-8-jdk-headless_8u272-b10-0ubuntu1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jdk-headless:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "Selecting previously unselected package openjdk-8-jdk:amd64.\n",
            "Preparing to unpack .../14-openjdk-8-jdk_8u272-b10-0ubuntu1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jdk:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "Setting up libgtk2.0-common (2.24.32-1ubuntu1) ...\n",
            "Setting up fonts-dejavu-core (2.37-1) ...\n",
            "Setting up libxxf86dga1:amd64 (2:1.1.4-1) ...\n",
            "Setting up fonts-dejavu-extra (2.37-1) ...\n",
            "Setting up openjdk-8-jre-headless:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/orbd to provide /usr/bin/orbd (orbd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/servertool to provide /usr/bin/servertool (servertool) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/tnameserv to provide /usr/bin/tnameserv (tnameserv) in auto mode\n",
            "Setting up libgtk2.0-0:amd64 (2.24.32-1ubuntu1) ...\n",
            "Setting up libgail18:amd64 (2.24.32-1ubuntu1) ...\n",
            "Setting up openjdk-8-jdk-headless:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/idlj to provide /usr/bin/idlj (idlj) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsimport to provide /usr/bin/wsimport (wsimport) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jsadebugd to provide /usr/bin/jsadebugd (jsadebugd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/native2ascii to provide /usr/bin/native2ascii (native2ascii) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javah to provide /usr/bin/javah (javah) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/clhsdb to provide /usr/bin/clhsdb (clhsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jhat to provide /usr/bin/jhat (jhat) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/extcheck to provide /usr/bin/extcheck (extcheck) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/hsdb to provide /usr/bin/hsdb (hsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/schemagen to provide /usr/bin/schemagen (schemagen) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/xjc to provide /usr/bin/xjc (xjc) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsgen to provide /usr/bin/wsgen (wsgen) in auto mode\n",
            "Setting up x11-utils (7.7+3build1) ...\n",
            "Setting up libgail-common:amd64 (2.24.32-1ubuntu1) ...\n",
            "Setting up libatk-wrapper-java (0.33.3-20ubuntu0.1) ...\n",
            "Setting up libgtk2.0-bin (2.24.32-1ubuntu1) ...\n",
            "Setting up libatk-wrapper-java-jni:amd64 (0.33.3-20ubuntu0.1) ...\n",
            "Setting up openjdk-8-jre:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/policytool to provide /usr/bin/policytool (policytool) in auto mode\n",
            "Setting up openjdk-8-jdk:amd64 (8u272-b10-0ubuntu1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/appletviewer to provide /usr/bin/appletviewer (appletviewer) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jconsole to provide /usr/bin/jconsole (jconsole) in auto mode\n",
            "Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n",
            "Processing triggers for hicolor-icon-theme (0.17-2) ...\n",
            "Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n",
            "Processing triggers for mime-support (3.60ubuntu1) ...\n",
            "Processing triggers for libc-bin (2.27-3ubuntu1.2) ...\n",
            "/sbin/ldconfig.real: /usr/local/lib/python3.6/dist-packages/ideep4py/lib/libmkldnn.so.0 is not a symbolic link\n",
            "\n",
            "Collecting Jpype1-py3\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9b/81/63f5e4202c598f362ee4684b41890f993d6e58309c5d90703f570ab85f62/JPype1-py3-0.5.5.4.tar.gz (88kB)\n",
            "\u001b[K     |████████████████████████████████| 92kB 3.9MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: Jpype1-py3\n",
            "  Building wheel for Jpype1-py3 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for Jpype1-py3: filename=JPype1_py3-0.5.5.4-cp36-cp36m-linux_x86_64.whl size=2676418 sha256=e1d2922c237ce18fd1a0ab1dd3ac3fea197b137312a95fd2a78e3f819f7c05a9\n",
            "  Stored in directory: /root/.cache/pip/wheels/52/37/1f/1015d908d12a0e9b239543d031fda0cded9823aa1306939541\n",
            "Successfully built Jpype1-py3\n",
            "Installing collected packages: Jpype1-py3\n",
            "Successfully installed Jpype1-py3-0.5.5.4\n",
            "Collecting konlpy\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/85/0e/f385566fec837c0b83f216b2da65db9997b35dd675e107752005b7d392b1/konlpy-0.5.2-py2.py3-none-any.whl (19.4MB)\n",
            "\u001b[K     |████████████████████████████████| 19.4MB 1.3MB/s \n",
            "\u001b[?25hCollecting JPype1>=0.7.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/fd/96/1030895dea70855a2e1078e3fe0d6a63dcb7c212309e07dc9ee39d33af54/JPype1-1.1.2-cp36-cp36m-manylinux2010_x86_64.whl (450kB)\n",
            "\u001b[K     |████████████████████████████████| 460kB 47.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.6/dist-packages (from konlpy) (4.2.6)\n",
            "Collecting colorama\n",
            "  Downloading https://files.pythonhosted.org/packages/44/98/5b86278fbbf250d239ae0ecb724f8572af1c91f4a11edf4d36a206189440/colorama-0.4.4-py2.py3-none-any.whl\n",
            "Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.6/dist-packages (from konlpy) (1.18.5)\n",
            "Collecting beautifulsoup4==4.6.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9e/d4/10f46e5cfac773e22707237bfcd51bbffeaf0a576b0a847ec7ab15bd7ace/beautifulsoup4-4.6.0-py3-none-any.whl (86kB)\n",
            "\u001b[K     |████████████████████████████████| 92kB 9.3MB/s \n",
            "\u001b[?25hCollecting tweepy>=3.7.0\n",
            "  Downloading https://files.pythonhosted.org/packages/bb/7c/99d51f80f3b77b107ebae2634108717362c059a41384a1810d13e2429a81/tweepy-3.9.0-py2.py3-none-any.whl\n",
            "Requirement already satisfied: typing-extensions; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from JPype1>=0.7.0->konlpy) (3.7.4.3)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tweepy>=3.7.0->konlpy) (1.3.0)\n",
            "Requirement already satisfied: requests[socks]>=2.11.1 in /usr/local/lib/python3.6/dist-packages (from tweepy>=3.7.0->konlpy) (2.23.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tweepy>=3.7.0->konlpy) (1.15.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->tweepy>=3.7.0->konlpy) (3.1.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (2020.6.20)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (3.0.4)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6; extra == \"socks\" in /usr/local/lib/python3.6/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (1.7.1)\n",
            "Installing collected packages: JPype1, colorama, beautifulsoup4, tweepy, konlpy\n",
            "  Found existing installation: beautifulsoup4 4.6.3\n",
            "    Uninstalling beautifulsoup4-4.6.3:\n",
            "      Successfully uninstalled beautifulsoup4-4.6.3\n",
            "  Found existing installation: tweepy 3.6.0\n",
            "    Uninstalling tweepy-3.6.0:\n",
            "      Successfully uninstalled tweepy-3.6.0\n",
            "Successfully installed JPype1-1.1.2 beautifulsoup4-4.6.0 colorama-0.4.4 konlpy-0.5.2 tweepy-3.9.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NASPXMItm2jq"
      },
      "source": [
        "from konlpy.tag import Okt #konlpy에서 Twitter 형태소 분석기를 import\n",
        "twitter_tag = Okt()\n",
        "\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "vec = CountVectorizer(tokenizer=twitter_tag.nouns, #우선은 명사만 사용\n",
        "                      decode_error ='ignore', \n",
        "                      max_df=0.5, #너무 자주 나타나는 단어는 제외, 책에서는 0.15를 사용\n",
        "                      #min_df = 3, #3개 미만의 문서에서 나타난 단어는 제외, 여기서는 max_features를 1000으로 제한하므로 별 필요 없음\n",
        "                      max_features = 1000) #적당한 대상 단어 수를 선택\n",
        "review_cv = vec.fit_transform(text)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "km377e9km42Z",
        "outputId": "a55d56ef-985d-4ee2-a056-f041db3487c1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "review_cv.shape"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12445, 1000)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7xehXJeoos-s"
      },
      "source": [
        "from sklearn.decomposition import LatentDirichletAllocation\n",
        "\n",
        "lda = LatentDirichletAllocation(n_components = 10, #추출할 topic의 수를 지정\n",
        "                                max_iter=25, #max_iter는 최종 모형에서는 5,000~10,000번 시도한다고 알려져 있음\n",
        "                                topic_word_prior= 0.1, doc_topic_prior=1.0,\n",
        "                                #topic_word_prior: beta, doc_topic_prior: alpha\n",
        "                                #일반적으로 beta는 0.1로 고정하고 alpha를 50/topic의 수 근처의 값을 시도\n",
        "                                #alpha와 beta는 낮은 값을 사용할수록 특정 토픽들이 두드러지도록 하는 효과가 있다고 합\n",
        "                                learning_method='batch', #'batch'는 'online'에 비해 더 성능이 좋고 느림, 현재는 default\n",
        "                                n_jobs= -1, #사용 processor 수, None이면 1, -1이면 모두 사용\n",
        "                                random_state=0)\n",
        "\n",
        "review_topics = lda.fit_transform(review_cv)"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qzo-ZyD4otm5",
        "outputId": "dadbef1c-9945-43e6-ae92-6ae5b6cd81b3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print('topic-word distribution dimension:', lda.components_.shape)\n",
        "print('document-topic distribution dimenstion', review_topics.shape)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "topic-word distribution dimension: (10, 1000)\n",
            "document-topic distribution dimenstion (12445, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9V39c5SJo48I"
      },
      "source": [
        "def print_top_words(model, feature_names, n_top_words):\n",
        "    for topic_idx, topic in enumerate(model.components_):\n",
        "        print(\"Topic #%d: \" % topic_idx, end='')\n",
        "        print(\", \".join([feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]))\n",
        "        #print(\", \".join([feature_names[i]+'('+str(topic[i])+')' for i in topic.argsort()[:-n_top_words - 1:-1]]))\n",
        "        # 위 slicing에서 맨 뒤 -1은 역순을 의미, 역순으로 했을 때 처음부터 n_top_words까지\n",
        "    print()"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iOpKuXeUo7JG",
        "outputId": "78361937-a56c-460e-8e8a-c8c27eea8548",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print_top_words(lda,vec.get_feature_names(), 10)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Topic #0: 좀, 느낌, 감독, 공포영화, 공포, 보기, 감, 소재, 나름, 소리\n",
            "Topic #1: 더, 정말, 말, 다시, 음악, 한번, 사랑, 모두, 작품, 인생\n",
            "Topic #2: 스토리, 내용, 마블, 부분, 만, 이해, 조금, 영상, 전개, 우리나라\n",
            "Topic #3: 생각, 영화, 것, 수, 듯, 한국, 역시, 신, 대한, 내내\n",
            "Topic #4: 그, 광주, 편, 역사, 우리, 가슴, 송강호, 노스, 택시, 다음\n",
            "Topic #5: 연기, 배우, 최고, 마동석, 윤계상, 액션, 차태현, 함, 한국영, 연기력\n",
            "Topic #6: 사람, 진짜, 그냥, 원작, 때, 안, 뭐, 신파, 거, 하나\n",
            "Topic #7: 감동, 눈물, 재미, 마지막, 꼭, 보고, 가족, 처음, 끝, 추천\n",
            "Topic #8: 시간, 볼, 내, 왜, 기대, 중간, 또, 나, 별로, 임\n",
            "Topic #9: 영화, 점, 이, 돈, 평점, 관객, 중, 눈, 천만, 난\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5OhA0fyio81w",
        "outputId": "4822c242-bd8b-4439-ff18-2b88a0fb8a2f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "twitter_tag.nouns(text[1])"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['개연', '성은', '무시', '액션', '스타로드', '각각', '영웅', '적', '신념', '얼마나']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d5WFFBMLo-o6"
      },
      "source": [
        "def tokenizer(str):\n",
        "    return [token for token in twitter_tag.nouns(str) if len(token) > 1]"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "glpPgCfcpAbp",
        "outputId": "7939ca07-52af-4d95-da02-e71ec2a04650",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "tokenizer(text[1])"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['개연', '성은', '무시', '액션', '스타로드', '각각', '영웅', '신념', '얼마나']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3auxNd9JpCX_"
      },
      "source": [
        "#count vector 새로 생성\n",
        "vec = CountVectorizer(tokenizer=tokenizer, decode_error ='ignore', \n",
        "                      max_df=0.5, max_features = 1000) #너무 자주 나타나는 단어는 제외\n",
        "review_cv = vec.fit_transform(text)"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2VEHkpIypEAg",
        "outputId": "4313663d-0d33-489a-e8a0-a64b8ec2a7db",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#topic modeling 수행\n",
        "lda = LatentDirichletAllocation(n_components = 50, max_iter=25, \n",
        "                                topic_word_prior= 0.1, doc_topic_prior=1.0,\n",
        "                                learning_method='batch',\n",
        "                                n_jobs= -1,\n",
        "                                random_state=0)\n",
        "review_topics = lda.fit_transform(review_cv)\n",
        "print_top_words(lda,vec.get_feature_names(), 10)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Topic #0: 영화, 공포, 머리, 노력, 때문, 폭력, 이름, 생각, 감동, 체험\n",
            "Topic #1: 노스, 영화, 이상, 결말, 히어로, 상영, 지루함, 절대, 시간, 좀더\n",
            "Topic #2: 마동석, 윤계상, 연기, 액션, 형사, 존재, 충격, 갑자기, 결말, 시각\n",
            "Topic #3: 모두, 제대로, 진심, 누구, 배우, 지금, 김향기, 영화, 고생, 다가\n",
            "Topic #4: 개인, 인간, 계속, 오늘, 영화, 세계, 그것, 해도, 사람, 그날\n",
            "Topic #5: 영화, 매우, 사람, 어른, 또한, 걱정, 라이언, 요즘, 결론, 각색\n",
            "Topic #6: 장면, 한국, 영화, 귀신, 가지, 생각, 헐리우드, 전달, 사진, 연말\n",
            "Topic #7: 마블, 완전, 어벤져스, 대사, 시리즈, 인피니티, 줄거리, 오역, 짜증, 시간\n",
            "Topic #8: 신파, 차태현, 액션, 눈물, 긴장감, 예상, 영화, 과거, 반드시, 예전\n",
            "Topic #9: 보고, 추천, 영화, 아들, 강추, 가슴, 가족, 영화관, 학년, 추석\n",
            "Topic #10: 영화, 무슨, 감동, 등장, 기대, 느낌, 정도, 리얼, 그냥, 피아노\n",
            "Topic #11: 사랑, 인생, 이야기, 영화, 무엇, 완성, 비교, 도대체, 제목, 아무\n",
            "Topic #12: 역시, 아이, 실망, 실화, 코믹, 효과, 영화, 스릴, 수작, 대안\n",
            "Topic #13: 사람, 이해, 대한, 마지막, 뭔가, 편이, 토르, 만점, 영화, 이승\n",
            "Topic #14: 스토리, 중간, 전개, 극장, 드라마, 전체, 정신, 화면, 더욱, 짜임새\n",
            "Topic #15: 현실, 주인공, 뮤지컬, 노래, 라면, 볼거리, 남자, 스톤, 시나리오, 이하\n",
            "Topic #16: 영상, 내용, 처음, 조선족, 영화, 교훈, 감성, 눈물, 갈수록, 원래\n",
            "Topic #17: 공포영화, 캐릭터, 아쉬움, 영화, 다큐, 상황, 누가, 다소, 외국, 타임\n",
            "Topic #18: 영화, 이제, 보지, 강철, 댓글, 제일, 인정, 실감, 선택, 주제\n",
            "Topic #19: 광주, 택시, 시민, 전두환, 민주화, 운전사, 개연, 운동, 배경, 감사\n",
            "Topic #20: 역사, 내내, 국민, 희생, 점수, 사실, 영웅, 영화, 분노, 인물\n",
            "Topic #21: 감동, 정말, 영화, 영화로, 재미, 오락, 최고, 언제, 장르, 마블리\n",
            "Topic #22: 영화, 생각, 얘기, 오히려, 화가, 경찰, 촬영, 최고, 기법, 이정\n",
            "Topic #23: 원작, 하나, 영화, 후반, 정도, 역할, 화보, 잘만, 미국, 사람\n",
            "Topic #24: 재미, 보기, 영화, 만화, 전혀, 반전, 공감, 요소, 스케일, 무조건\n",
            "Topic #25: 대박, 가장, 범죄, 예고편, 이번, 영화, 도시, 신파극, 차라리, 악당\n",
            "Topic #26: 음악, 영화, 연기력, 배우, 모든, 정말, 최고, 마지막, 울음, 통해\n",
            "Topic #27: 평점, 영화, 다른, 최고, 간만, 혼자, 올해, 조폭, 명작, 보시\n",
            "Topic #28: 영화, 한국영, 웃음, 그래픽, 코드, 만큼, 한편, 남편, 개그, 제작\n",
            "Topic #29: 몰입, 영화, 이후, 몰입도, 영화관, 거의, 취향, 연기, 분위기, 수도\n",
            "Topic #30: 진짜, 최악, 소리, 영화, 시작, 부모님, 정말, 제발, 그때, 처음\n",
            "Topic #31: 기억, 판타지, 영화, 중국, 인상, 자극, 죽음, 박수, 호불호, 애니메이션\n",
            "Topic #32: 영화, 우리나라, 발전, 얼마나, 역대, 기도, 기술, 기대, 스포, 그닥\n",
            "Topic #33: 우리, 영화, 여운, 의미, 구성, 나라, 다시, 군인, 사실, 문화\n",
            "Topic #34: 영화, 한번, 표현, 저승, 연기자, 생각, 눈물, 나중, 막판, 감동\n",
            "Topic #35: 감독, 영화, 곤지암, 친구, 일단, 여자, 안보, 전반, 가면, 카메라\n",
            "Topic #36: 웹툰, 나름, 엄마, 감정, 영화, 자신, 평가, 동생, 어디, 표정\n",
            "Topic #37: 연기, 배우, 조연, 주연, 진짜, 악역, 그게, 점도, 간다, 자기\n",
            "Topic #38: 가슴, 진실, 영화, 시대, 눈물, 민주주의, 초딩, 스크린, 문제, 지금\n",
            "Topic #39: 관객, 수준, 천만, 연출, 감독, 약간, 흥행, 엔딩, 아픔, 영화\n",
            "Topic #40: 내용, 초반, 조금, 영화, 생각, 펑펑, 다만, 슬픔, 눈물, 최고다\n",
            "Topic #41: 별로, 그냥, 이영화, 영화, 정도, 사실, 진짜, 잔인함, 느낌, 시간\n",
            "Topic #42: 작품, 송강호, 소재, 위해, 기자, 대한민국, 유머, 최근, 재판, 추격\n",
            "Topic #43: 영화, 아주, 자체, 실제, 순간, 동안, 캐스팅, 사건, 묘사, 부모\n",
            "Topic #44: 영화, 억지, 관람, 후회, 대해, 생각, 집중, 가족, 이정재, 거리\n",
            "Topic #45: 감동, 영화, 알바, 중반, 쓰레기, 코코, 때문, 겨울왕국, 살짝, 무서움\n",
            "Topic #46: 마음, 가족, 모습, 개봉, 디즈니, 세상, 영화, 다시, 반성, 상상\n",
            "Topic #47: 하정우, 김동욱, 지옥, 이유, 어머니, 주지훈, 연기, 아저씨, 최고, 소문\n",
            "Topic #48: 느낌, 영화, 기대, 매력, 영화인, 억지로, 편도, 흐름, 감동, 방금\n",
            "Topic #49: 부분, 다음, 이건, 영화, 시간, 기분, 출연, 보고, 번역, 킬링타임\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ESeK7aWIpRNY",
        "outputId": "fe185b54-2aa6-49bb-af02-95d157b6a3ed",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "kmeans = KMeans(n_clusters=5) #5개 클러스터로 분류\n",
        "kmeans.fit(lda.components_)\n",
        "\n",
        "print('topic-word distribution dimension:', lda.components_.shape)\n",
        "print('Cluster label:', kmeans.labels_)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "topic-word distribution dimension: (50, 1000)\n",
            "Cluster label: [1 1 1 1 1 1 1 1 1 1 1 1 1 4 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\n",
            " 3 1 1 1 1 1 1 1 1 1 1 1 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LV-BYFSwpaC5",
        "outputId": "d1b8f65f-2bfb-4e1a-8466-5d4832c8f838",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.manifold import TSNE\n",
        "tsne = TSNE(n_components=2, random_state=42)\n",
        "tsne_review = tsne.fit_transform(lda.components_)\n",
        "print('TSNE dimension:', tsne_review.shape)\n",
        "tsne_review[:,0]"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "TSNE dimension: (50, 2)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-4.2698837e+01,  9.5934927e-01, -1.5029411e+02, -6.0237888e+01,\n",
              "        5.7522644e+01, -3.4366104e+01,  5.0061352e+01,  5.0396961e+01,\n",
              "       -1.3341701e+02, -1.5530203e+02, -1.3388657e+01, -1.0669691e+02,\n",
              "        3.6686241e+01,  1.4093440e+02,  5.2927020e+02,  9.8415558e+01,\n",
              "       -9.9136971e+01,  7.5688873e+01, -2.8825984e+00,  1.3720456e+02,\n",
              "        1.0767493e+02, -6.0687833e+00, -5.4359825e+01, -2.1194077e+01,\n",
              "        5.6720509e+01, -3.3798653e+01, -8.3291946e+01, -4.9196175e+01,\n",
              "        1.5748225e+01, -6.1991935e+00,  4.7341946e+01,  2.4803320e+01,\n",
              "        2.4014154e+01,  5.2269173e+01, -6.9044388e+01,  2.9307858e+01,\n",
              "       -9.4413605e+01, -6.5143654e+01, -4.9299189e-01,  1.4362802e+02,\n",
              "        3.5614677e+01, -7.0637016e+01,  9.8988419e+01, -2.5275827e+01,\n",
              "       -9.7152805e+00,  3.0104673e+00, -2.7035402e+01, -4.0681293e+01,\n",
              "        7.3616318e+01, -1.2427878e+02], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ajBE3Q5IpbqZ"
      },
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import font_manager, rc\n",
        "import matplotlib as mpl\n",
        "\n",
        "# 그래프에서 마이너스 폰트 깨지는 문제에 대한 대처\n",
        "mpl.rcParams['axes.unicode_minus'] = False"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z_NDGpjFpdk3",
        "outputId": "fce87780-aece-4198-ac30-423210deb561",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        }
      },
      "source": [
        "colors = {0:'blue', 1:'yellow', 2:'red', 3:'green', 4:'purple'}\n",
        "x1 = tsne_review[:,0]\n",
        "x2 = tsne_review[:,1]\n",
        "plt.scatter(x1, x2)\n",
        "\n",
        "plt.figure(figsize=(15,10))\n",
        "plt.xlim(min(x1), max(x1))\n",
        "plt.ylim(min(x2), max(x2))\n",
        "for i in range(len(x1)):\n",
        "#    plt.text(X1_lsi[i], X2_lsi[i], sample_label[i],\n",
        "#            color = colors[sample_label[i]])\n",
        "    plt.text(x1[i], x2[i], kmeans.labels_[i],\n",
        "            color = colors[kmeans.labels_[i]])\n",
        "\n",
        "#for word, pos in df.iterrows():\n",
        "#    ax.annotate(word, pos, fontsize=30)\n",
        "plt.show()\n",
        "\n",
        "#아래 결과를 보면 각 topic들이 고르게 분포하고 있어, 클러스터링이 별로 의미 없음을 알 수 있음"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2U1HbNiWrKmx",
        "outputId": "eb590cb4-a552-41f0-8c46-d8497dbf27ac",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "lda.perplexity(review_cv)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "581.1155668607572"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pm-33SzArMsB",
        "outputId": "898d0d6b-4f88-41cc-a3fa-9fd3bf8356c6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#topic modeling 수행\n",
        "lda = LatentDirichletAllocation(n_components = 25, max_iter=25, \n",
        "                                topic_word_prior= 0.1, doc_topic_prior=2.0,\n",
        "                                learning_method='batch',\n",
        "                                n_jobs= -1,\n",
        "                                random_state=0)\n",
        "review_topics = lda.fit_transform(review_cv)\n",
        "print_top_words(lda,vec.get_feature_names(), 10)\n",
        "lda.perplexity(review_cv)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Topic #0: 영화, 공포, 아주, 디즈니, 감동, 자극, 갈수록, 제발, 머리, 노력\n",
            "Topic #1: 영화, 노스, 히어로, 다음, 지루함, 뮤지컬, 절대, 상영, 진짜, 스토리\n",
            "Topic #2: 윤계상, 마동석, 연기, 영화, 액션, 악역, 형사, 배우, 존재, 평가\n",
            "Topic #3: 하정우, 연기, 영화, 모두, 주지훈, 진심, 배우, 누구, 거의, 시대\n",
            "Topic #4: 영화, 계속, 웃음, 세계, 감동, 개인, 우리, 사람, 해도, 오늘\n",
            "Topic #5: 영화, 평점, 기억, 매우, 코코, 어른, 공감, 또한, 여기, 감동\n",
            "Topic #6: 영화, 한국, 생각, 장면, 흥행, 가지, 여자, 스크린, 보고, 배우\n",
            "Topic #7: 마블, 영화, 어벤져스, 완전, 시간, 대사, 시리즈, 부분, 사람, 진짜\n",
            "Topic #8: 차태현, 영화, 신파, 눈물, 연기, 진짜, 혼자, 정말, 배우, 액션\n",
            "Topic #9: 영화, 보고, 범죄, 아들, 추천, 연기, 정말, 도시, 연기자, 관람\n",
            "Topic #10: 영화, 감동, 등장, 쓰레기, 천만, 느낌, 전반, 생각, 기대, 그냥\n",
            "Topic #11: 사랑, 영화, 인생, 이야기, 음악, 최고, 완성, 마지막, 올해, 비교\n",
            "Topic #12: 영화, 실망, 스토리, 그래픽, 감동, 아이, 재미, 실화, 개연, 초딩\n",
            "Topic #13: 영화, 이해, 사람, 편이, 인간, 마지막, 토르, 감정, 진짜, 뭔가\n",
            "Topic #14: 영화, 스토리, 중간, 전개, 화면, 구성, 전체, 극장, 드라마, 설정\n",
            "Topic #15: 영화, 중국, 남자, 다만, 스톤, 볼거리, 노래, 현실, 시나리오, 유머\n",
            "Topic #16: 영화, 내용, 교훈, 부모님, 배우, 조선족, 감성, 연기, 모든, 영상\n",
            "Topic #17: 영화, 공포영화, 귀신, 약간, 다큐, 상황, 관객, 다소, 누가, 기술\n",
            "Topic #18: 영화, 감독, 강철, 이제, 댓글, 제일, 알바, 웹툰, 인정, 그냥\n",
            "Topic #19: 광주, 송강호, 택시, 시민, 역사, 진실, 민주화, 기자, 운전사, 모습\n",
            "Topic #20: 영화, 역사, 대한민국, 국민, 점수, 보지, 후회, 개봉, 내내, 사람\n",
            "Topic #21: 영화, 감동, 정말, 엄마, 연기, 다른, 재미, 생각, 오락, 언제\n",
            "Topic #22: 영화, 생각, 얘기, 조폭, 오히려, 화가, 경찰, 감동, 최고, 마동석\n",
            "Topic #23: 하나, 영화, 사람, 원작, 보고, 지옥, 억지, 진짜, 세상, 화보\n",
            "Topic #24: 영화, 전혀, 만화, 반전, 원작, 저승, 재미, 정말, 연기, 판타지\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "557.8402583505608"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2MvUxraLrOat"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
